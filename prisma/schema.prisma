datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String @id @default(cuid())
  displayName String
  email       String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  googleRefreshToken    GoogleRefreshToken?
  countryRepresentative CountryRepresentative?
  newsRepresentative    NewsOrgRepresentative?

  mediator Boolean @default(false)
}

model GoogleRefreshToken {
  refreshToken String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Country {
  id              String                  @id @default(cuid())
  name            String
  flag            String
  representatives CountryRepresentative[]

  Alliance   Alliance? @relation(fields: [allianceId], references: [id])
  allianceId String?

  sharingsReceived SharingCountry[]
  sharingsOwned    Sharing[]
  signatures       Signature[]
  conversations    ConversationCountryMember[]
}

model CountryRepresentative {
  id   String @id @default(cuid())
  name String

  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId String  @unique

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String    @unique
  messages Message[]
  @@map("Representative")
}

model Alliance {
  id   String @id @default(cuid())
  name String

  countries Country[]
  sharings  Sharing[]
}

model Announcement {
  id String @id @default(cuid())

  content          String
  fictionalDate    DateTime
  fictionalDateStr String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {

  title   String
  slug    String @id @unique
  content String
  author  String
  newsOrg String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id         String      @id @default(cuid())
  name       String
  uploaded   Boolean     @default(false)
  sharingId  String      @unique
  sharing    Sharing     @relation(fields: [sharingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  signatures Signature[]
}

model Signature {
  id         String   @id @default(cuid())
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  documentId String

  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId String
}

model Sharing {
  id             String           @id @default(cuid())
  document       Document?
  sharingCountry SharingCountry[]
  public         Boolean          @default(false)
  sharer         Country?         @relation(fields: [sharerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  sharerId       String?
  alliance       Alliance?        @relation(fields: [allianceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  allianceId     String?
}

model SharingCountry {
  id        String  @id @default(cuid())
  countryId String
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  sharingId String
  sharing   Sharing @relation(fields: [sharingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Conversation {
  id   String @id @default(cuid())
  name String

  countryMembers ConversationCountryMember[]
  newsOrgMembers ConversationNewsOrgMember[]

  messages Message[]
}

model ConversationCountryMember {
  id        String  @id @default(cuid())
  countryId String
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
}

model NewsOrg {
  id   String @id @default(cuid())
  name String

  representatives            NewsOrgRepresentative[]
  conversationNewsOrgMembers ConversationNewsOrgMember[]
}

model NewsOrgRepresentative {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  newsOrgId String
  newsOrg   NewsOrg @relation(fields: [newsOrgId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  messages Message[]
}

model ConversationNewsOrgMember {
  id String @id @default(cuid())

  newsOrgId String
  newsOrg   NewsOrg @relation(fields: [newsOrgId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
}

model Message {
  id   String @id @default(cuid())
  text String

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  countryAuthorId String?
  countryAuthor   CountryRepresentative? @relation(fields: [countryAuthorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  newsOrgAuthorId String?
  newsOrgAuthor   NewsOrgRepresentative? @relation(fields: [newsOrgAuthorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
